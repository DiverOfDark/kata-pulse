name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
      - develop
  schedule:
    # Run daily at 2 AM UTC for security scans
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: diverofdark/kata-pulse/kata-pulse
  CHART_NAME: diverofdark/kata-pulse/chart

jobs:
  # ============================================================================
  # QUALITY CHECKS - Fast parallel tests
  # ============================================================================

  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: protobuf-compiler pkg-config libssl-dev
          version: 1.0

      - name: Run tests
        run: cargo test --verbose

  clippy:
    name: Clippy Lints
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: protobuf-compiler pkg-config libssl-dev
          version: 1.0

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt -- --check

  helm-lint:
    name: Helm Chart Lint
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5

      - uses: azure/setup-helm@v3
        with:
          version: latest

      - name: Lint Helm chart
        run: helm lint helm/kata-pulse

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: protobuf-compiler pkg-config libssl-dev
          version: 1.0

      - name: Build release
        run: cargo build --release --verbose

  # ============================================================================
  # BUILD & PUSH - Multi-architecture Docker build
  # ============================================================================

  build-publish:
    name: Build, Push and Publish
    runs-on: ubuntu-latest
    needs: [test-suite, clippy, fmt, helm-lint, build-release]
    permissions:
      contents: write
      security-events: write
      packages: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: latest

      - name: Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: cache-mount
          key: cache-mount

      - name: Restore Docker cache mounts
        uses: reproducible-containers/buildkit-cache-dance@v3
        with:
          builder: ${{ steps.setup-buildx.outputs.name }}
          cache-dir: cache-mount
          dockerfile: Dockerfile
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract version from tags
        id: version
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          # Get first tag and extract version
          TAG=$(echo "$TAGS" | head -1 | rev | cut -d: -f1 | rev)
          echo "version=$TAG" >> $GITHUB_OUTPUT

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v5
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Scan with Grype
        uses: anchore/scan-action@v6
        id: scan
        with:
          image: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}'
          fail-build: false
          output-format: sarif

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Update Helm Chart appVersion
        run: |
          sed -i "s/appVersion: .*/appVersion: \"${{ steps.version.outputs.version }}\"/" helm/kata-pulse/Chart.yaml

      - name: Package Helm chart
        run: helm package helm/kata-pulse

      - name: Push Helm chart to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login -u ${{ github.actor }} --password-stdin ${{ env.REGISTRY }}
          CHART_FILE=$(ls kata-pulse-*.tgz | head -1)
          helm push "$CHART_FILE" oci://${{ env.REGISTRY }}/${{ env.CHART_NAME }}

  # ============================================================================
  # RELEASE CREATION
  # ============================================================================

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-publish]
    permissions:
      contents: write


    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download SBOM artifact
        uses: actions/download-artifact@v5
        with:
          name: sbom

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            sbom.spdx.json
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}