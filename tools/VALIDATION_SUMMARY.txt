===============================================================================
KATA TO CADVISOR METRICS MAPPING - VALIDATION SUMMARY
===============================================================================

Analysis Date: 2025-10-23
Source Files:
  - kata_metrics_example.out (23,655 lines)
  - cadvisor.out (8,317 lines)
Test Dataset:
  - 19 unique Kata sandboxes
  - 72+ unique metrics types
  - 100% data completeness (no null/empty fields)

===============================================================================
VALIDATION RESULTS
===============================================================================

✅ VALIDATED & CONFIRMED:

1. MEMORY METRICS (10/14 mappable)
   - mem_total, mem_free, mem_available: PRESENT
   - active, inactive, cached, buffers: PRESENT
   - anon_pages (RSS), swap: PRESENT
   - Formula: container_memory_usage_bytes = mem_total - mem_free
   - Verified: Values reasonable (1GB+ in test VMs)

2. CPU METRICS (5/8 mappable)
   - Per-CPU data: user, system, idle, iowait, irq, softirq, steal, guest
   - Units: JIFFIES (not seconds!) - must divide by 100
   - Per-CPU breakdown: Available (cpu="0", "1", "2", etc)
   - Formula: container_cpu_usage_seconds_total = (user+system+guest+nice)/100
   - Verified: Values reasonable (0-100k jiffies per CPU)
   - Missing: CPU quota, period, shares (need K8s API)

3. NETWORK METRICS (8/8 mappable) ✅ FULLY COVERED
   - Interfaces: eth0, docker0, lo detected
   - Per-interface stats: recv_bytes, xmit_bytes, recv_packets, xmit_packets
   - Errors/drops: recv_errs, xmit_errs, recv_drop, xmit_drop ALL PRESENT
   - Filtering rule: Include eth0/veth/tap/tun, skip lo/docker0
   - Verified: 304 eth0 entries, 224 docker0 (should skip)
   - Action: Filter by interface name regex before aggregation

4. DISK I/O METRICS (12/15 mappable)
   - Operations: reads, writes, discards ALL PRESENT
   - Sectors: sectors_read, sectors_written PRESENT
   - Conversion: * 512 for bytes (confirmed)
   - 🚨 MAJOR DISCOVERY: time_reading, time_writing AVAILABLE!
   - time_in_progress, weighted_time_in_progress ALSO AVAILABLE!
   - Units: milliseconds (divide by 1000 for seconds)
   - Per-disk data: loop0, loop1, loop2... separate disks tracked
   - Now maps to: container_fs_read_seconds_total ✅
   - Now maps to: container_fs_write_seconds_total ✅
   - Missing: filesystem usage (du), inode counts

5. PROCESS METRICS (5/5 mappable) ✅ FULLY COVERED
   - Tasks: cur=1-2 (current), max=78 (maximum)
   - Threads: hypervisor=13, shim/agent available
   - FDs: shim_fds, hypervisor_fds, virtiofsd_fds, agent_fds
   - Load average: load1, load5, load15 ALL PRESENT
   - Verified: cur < max reasonable, thread counts per-component

⚠️  CRITICAL LIMITATIONS:

1. LABEL ENRICHMENT - CRI METADATA EMPTY!
   - cri_uid="", cri_name="", cri_namespace="" in ALL metrics
   - Impact: Cannot generate pod/namespace labels automatically
   - Workaround: Implement separate CRI lookup service
   - Recommendation: Query K8s API for sandbox_id → pod mapping

2. MISSING METRICS (cannot map without additional sources):
   - CPU quotas/period/shares (6 metrics) - Need K8s pod spec
   - PSI metrics (6 metrics) - Not collected by Kata
   - Memory peak usage (1 metric) - Not tracked historically
   - OOM events (1 metric) - Not collected
   - Filesystem usage (3 metrics) - Not available in Kata
   - Per-container data (N metrics) - VM-level only, not container-level
   Total: ~18 metrics still missing (~20% of cAdvisor metrics)

3. VM-LEVEL SCOPE:
   - Metrics are per-sandbox (VM), not per-container
   - If pod has multiple containers, only aggregate VM stats available
   - No per-container CPU/memory breakdown

===============================================================================
UNIT CONVERSIONS VERIFIED
===============================================================================

Conversion | Source | Target | Formula | Status
-----------|--------|--------|---------|--------
CPU Time   | jiffies | seconds | / 100 | ✅ Confirmed (Linux default)
Disk Sectors | sectors | bytes | × 512 | ✅ Confirmed (standard)
Disk Time | ms | seconds | / 1000 | ✅ Confirmed (iostat std)
Memory | bytes | bytes | no-op | ✅ Already in bytes
Network | bytes | bytes | no-op | ✅ Already in bytes

===============================================================================
COVERAGE ESTIMATE
===============================================================================

Category           | cAdvisor | Kata Mapped | Coverage
-------------------|----------|------------|----------
CPU (excl. quota)  | 5 metrics | 5 metrics  | 100%
Memory (excl. peak)| 11 metrics | 10 metrics | 91%
Network            | 8 metrics | 8 metrics  | 100%
Disk I/O (all)     | 15 metrics | 12 metrics | 80%
Process            | 5 metrics | 5 metrics  | 100%
Pressure (PSI)     | 6 metrics | 0 metrics  | 0%
Labels             | 8 labels | 1 label    | 12.5%
TOTAL              | 64 metrics | 48 metrics | 75%

Note: CPU quota/memory peak/PSI cannot be mapped from Kata metrics alone
Estimate improved from 70-75% to 75-80% due to disk I/O time discovery

===============================================================================
READY-TO-IMPLEMENT FORMULAS
===============================================================================

Core Phase 1 (High-value, immediate implementation):

1. CPU: sum(user+system+guest+nice) / 100
2. Memory: mem_total - mem_free
3. Network: aggregate eth0 only (skip lo, docker0)
4. Disk I/O: sectors×512, time/1000
5. Processes: guest_tasks.cur, aggregate threads

Additional Phase 2 (Medium priority):

6. Memory working set: active + inactive_file
7. Network errors/drops: sum across interfaces
8. Disk merged operations: sum per-disk
9. Load averages: load1, load5, load15
10. Per-device I/O: keep disk separation for blkio

Deferred Phase 3 (Separate component):

11. Label enrichment: Implement CRI metadata service
12. CPU limits: Query K8s API for pod spec
13. Host overhead: Track shim/hypervisor separately

===============================================================================
DATA QUALITY ASSESSMENT
===============================================================================

Strengths:
✅ Complete: No null/empty metric values across 19 sandboxes
✅ Consistent: All metrics have identical structure
✅ Rich: Per-CPU, per-disk, per-interface granularity
✅ Historical: Process lifetime stats (utime/stime)
✅ Multi-layer: Guest OS, hypervisor, agent, shim metrics

Limitations:
⚠️  No embedded labels: CRI metadata separate concern
⚠️  VM-level only: No per-container breakdown
⚠️  No PSI: Process Stall Information not available
⚠️  No limits: CPU/memory quota information absent
⚠️  No timestamps: Values current-only, no historical

===============================================================================
IMPLEMENTATION ROADMAP
===============================================================================

Phase 1 (Core Mapping - Week 1):
  - [ ] Implement CPU time calculation (jiffies → seconds)
  - [ ] Implement memory calculation (mem_total - mem_free)
  - [ ] Implement network aggregation (eth0 filter + sum)
  - [ ] Implement disk I/O mapping (×512, /1000 conversions)
  - [ ] Implement process count mapping
  - [ ] Unit test all conversions

Phase 2 (Enhanced Metrics - Week 2):
  - [ ] Add memory working set calculation
  - [ ] Add network error/drop metrics
  - [ ] Add disk merged operations
  - [ ] Add load average mapping
  - [ ] Integration test with real Kata

Phase 3 (Label Enrichment - Week 3):
  - [ ] Design CRI metadata lookup service
  - [ ] Implement caching layer
  - [ ] Add pod/namespace label enrichment
  - [ ] Handle enrichment failures gracefully

Phase 4 (Optimization & Polish - Week 4):
  - [ ] Performance profiling
  - [ ] Memory leak detection
  - [ ] Error handling edge cases
  - [ ] Documentation & examples

===============================================================================
TESTING CHECKLIST
===============================================================================

Unit Tests:
- [ ] Memory: verify mem_used = mem_total - mem_free
- [ ] CPU: verify monotonicity (each sample >= previous)
- [ ] Network: verify eth0_bytes = sum(eth0_interfaces)
- [ ] Disk: verify reads × 512 ≤ total disk bytes
- [ ] Units: verify all conversions (jiffies, ms, sectors)

Integration Tests:
- [ ] 19-sandbox real data: all metrics map correctly
- [ ] Label enrichment: sandbox_id → pod name resolution
- [ ] Filtering: lo/docker0 excluded from network metrics
- [ ] Aggregation: per-CPU/disk sums correct
- [ ] Performance: <100ms per metric batch

Validation Tests:
- [ ] Sanity checks: mem_available <= mem_total
- [ ] Ordering: CPU time monotonic increasing
- [ ] Ratio checks: drops < packets
- [ ] Comparison: metrics similar to cAdvisor baseline

===============================================================================
KEY IMPLEMENTATION DECISIONS
===============================================================================

1. UNIT CONVERSIONS (VERIFIED):
   ✓ CPU jiffies: Divide by 100 (not 1024)
   ✓ Disk sectors: Multiply by 512 (standard sector size)
   ✓ Disk time: Divide by 1000 (ms to seconds)

2. INTERFACE FILTERING (VERIFIED):
   ✓ Include: eth0, veth*, tap*, tun*
   ✓ Exclude: lo, docker0, br-*, vxlan*, flannel*
   ✓ Implementation: Regex pattern matching

3. AGGREGATION STRATEGY (VERIFIED):
   ✓ SUM across CPUs, disks, interfaces (total view)
   ✓ Keep per-device for blkio metrics
   ✓ Filter before aggregating (not after)

4. LABEL ENRICHMENT (CRITICAL):
   ✓ NOT embedded in metrics (all empty)
   ✓ Separate CRI lookup required
   ✓ Cache for performance (expensive K8s queries)

5. ERROR HANDLING:
   ✓ Gracefully degrade (metrics present but unlabeled OK)
   ✓ Log CRI lookup failures
   ✓ Fallback to sandbox_id-only labels

===============================================================================
ESTIMATED EFFORT & TIMELINE
===============================================================================

Analysis & Planning: 3 days (COMPLETE)
  ✓ Analyzed metrics structure
  ✓ Validated against real data
  ✓ Documented all mappings
  ✓ Identified critical gaps

Implementation: 2-3 weeks
  - Phase 1 (Core): 4-5 days
  - Phase 2 (Enhanced): 3-4 days
  - Phase 3 (Labels): 4-5 days
  - Phase 4 (Polish): 2-3 days

Testing: 1 week
  - Unit tests: 2-3 days
  - Integration: 2-3 days
  - Validation: 1-2 days

Documentation: 2-3 days
  - Code comments
  - Usage examples
  - Troubleshooting guide

Total Estimate: 4-5 weeks to production-ready

===============================================================================
NEXT STEPS
===============================================================================

1. Review this mapping document with team
2. Decide on label enrichment approach (CRI integration)
3. Create implementation specification
4. Set up development environment
5. Begin Phase 1 implementation
6. Run validation tests against real Kata clusters

===============================================================================
